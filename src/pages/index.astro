---
import Layout from '../layouts/Layout.astro';
import HeroSection from '../components/HeroSection.astro';
import ServiceCard from '../components/ServiceCard.astro';
import TestimonialCard from '../components/TestimonialCard.astro';
import StatsSection from '../components/StatsSection.astro';
import PricingSection from '../components/PricingSection.astro';
import FeaturesSection from '../components/FeaturesSection.astro';
import TestimonialSection from '../components/TestimonialSection.astro';
import BlogSection from '../components/home/BlogSection.astro';
import CTASection from '../components/shared/CTASection.astro';
import { API_BASE_URL, TENANT_ID } from '../utils/env';

const services = [
  {
    title: 'AI Strategy Consulting',
    description: 'Develop a comprehensive AI roadmap tailored to your business needs and objectives.',
    icon: 'lightbulb'
  },
  {
    title: 'Implementation & Integration',
    description: 'Seamless implementation of AI solutions across your organization with expert guidance.',
    icon: 'code'
  },
  {
    title: 'Training & Development',
    description: 'Empower your team with the knowledge and skills needed to leverage AI effectively.',
    icon: 'school'
  },
  {
    title: 'AI Infrastructure Setup',
    description: 'Build robust AI infrastructure that scales with your growing business needs.',
    icon: 'architecture'
  }
];

const testimonials = [
  {
    name: 'Sarah Johnson',
    role: 'CTO',
    company: 'TechCorp',
    content: 'Working with AI Nexus transformed our approach to AI implementation. Their expertise and guidance were invaluable.',
    image: '/testimonials/sarah.jpg'
  },
  {
    name: 'Michael Chen',
    role: 'CEO',
    company: 'InnovateX',
    content: 'The results we have achieved with AI Nexus have exceeded our expectations. They are true partners in innovation.',
    image: '/testimonials/michael.jpg'
  }
];
---

<Layout title="Welcome">
  <HeroSection />
  <FeaturesSection />
  <PricingSection />
  <TestimonialSection />

  <CTASection
    title="Is Your Business AI-Ready?"
    description="Take our free 1-minute audit to assess your readiness for AI integration and receive a personalized readiness score."
    primaryButtonText="Take the Audit"
    primaryButtonLink="/agent-readiness-audit"
  />

  <BlogSection />

  <CTASection
    title="Start Your AI Journey Today"
    description="Transform your business with cutting-edge AI solutions tailored to your needs"
    primaryButtonText="Get Started"
    secondaryButtonText="Learn More"
    secondaryButtonLink="/services"
  />

  <!-- Step 1: Add this container div somewhere in your HTML, preferably at the end of your body -->
  <div id="chatbot-container"></div>

  <!-- Step 2: Include React libraries -->
  <script is:inline define:vars={{ apiBaseUrl: API_BASE_URL, tenantId: TENANT_ID }}>
    (function() {
      try {
        console.log('[Widget] apiBaseUrl =', apiBaseUrl);
        console.log('[Widget] tenantId =', tenantId);
        const reactUrl = `${apiBaseUrl}/static/vendor/react.production.min.js`;
        const reactDomUrl = `${apiBaseUrl}/static/vendor/react-dom.production.min.js`;
        const widgetUrl = `${apiBaseUrl}/static/precisemri-chat-widget.min.js`;
        console.log('[Widget] React URL =', reactUrl);
        console.log('[Widget] ReactDOM URL =', reactDomUrl);
        console.log('[Widget] Widget URL =', widgetUrl);
        if (!/^https?:\/\//i.test(apiBaseUrl)) {
          console.warn('[Widget] apiBaseUrl does not start with http/https:', apiBaseUrl);
        }
      } catch (e) {
        console.error('[Widget] Preload debug error:', e);
      }
    })();
  </script>
  <script is:inline src={`${API_BASE_URL}/static/vendor/react.production.min.js`}></script>
  <script is:inline src={`${API_BASE_URL}/static/vendor/react-dom.production.min.js`}></script>

  <!-- Step 3: Configure the widget -->
  <script is:inline define:vars={{ apiBaseUrl: API_BASE_URL, tenantId: TENANT_ID }}>
    window.CHATBOT_CONFIG = {
      // --- Customizable Settings ---
      primaryColor: "#0066cc",       // Main color theme
      secondaryColor: "#f0f2f5",     // Secondary color theme
      buttonText: "Chat with us",     // Text on the minimized button
      headerText: "Possible Minds Assistant", // Text in the widget header
      welcomeMessage: "Hello! How can I help you today?", // Welcome message
      placeholder: "Type your message...", // Placeholder text in the input
      // --- Server Configuration (Do Not Change Without Server Update) ---
      apiUrl: `${apiBaseUrl}/api/v1/chat/`, // API endpoint
      tenantId: tenantId, // Your unique tenant ID
      // --- New Positioning Styles ---
      widgetPositionStyles: {
          position: 'fixed',
          bottom: '20px', // Position 20px from the bottom
          right: '20px'   // Position 20px from the right
        },
        startOpen: true
    };
  </script>

  <!-- Step 4: Load the widget script -->
  <script is:inline src={`${API_BASE_URL}/static/precisemri-chat-widget.min.js`}></script>

  <!-- Step 5: Initialize the widget -->
  <script is:inline>
    (function() {
      // Ensure the container ID here matches the ID in step 1
      const container = document.getElementById('chatbot-container');
      console.log('[Widget] container present =', !!container);
      console.log('[Widget] window.React present =', !!window.React);
      console.log('[Widget] window.ReactDOM present =', !!window.ReactDOM);
      console.log('[Widget] window.PreciseMRIChatWidget present =', !!(window).PreciseMRIChatWidget);
      if (!(window).PreciseMRIChatWidget) {
        console.warn('[Widget] PreciseMRIChatWidget not found yet. It may still be loading.');
      }
      if (container && window.PreciseMRIChatWidget && window.PreciseMRIChatWidget.mount) {
        window.PreciseMRIChatWidget.mount(container);
        console.log("Possible Minds Chat Widget Initialized.");
      } else {
        // Retry initialization after a short delay, as scripts might load out of order
        setTimeout(() => {
          console.log('[Widget] Retry check - container:', !!container, 'React:', !!window.React, 'ReactDOM:', !!window.ReactDOM, 'Widget:', !!(window).PreciseMRIChatWidget);
          if (container && window.PreciseMRIChatWidget && window.PreciseMRIChatWidget.mount) {
             window.PreciseMRIChatWidget.mount(container);
             console.log("Possible Minds Chat Widget Initialized (after delay).");
          } else {
            if (!container) {
              console.error('[Widget] Initialization failed: container #chatbot-container not found');
            }
            if (!window.React) {
              console.error('[Widget] Initialization failed: window.React not loaded');
            }
            if (!window.ReactDOM) {
              console.error('[Widget] Initialization failed: window.ReactDOM not loaded');
            }
            if (!(window).PreciseMRIChatWidget) {
              console.error('[Widget] Initialization failed: window.PreciseMRIChatWidget not loaded');
            } else if (!window.PreciseMRIChatWidget.mount) {
              console.error('[Widget] Initialization failed: window.PreciseMRIChatWidget.mount missing');
            }
            console.error("Could not initialize Possible Minds Chat Widget. Container or Widget script not found.");
          }
        }, 500); // Wait 500ms
      }
    })();
  </script>
</Layout>